// Date formatter

function formatDate(dateString) {
  const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', options);
}




/*
Template Name: Admin Template
Author: Wrappixel

File: js
*/
// ==============================================================
// Auto select left navbar
// ==============================================================

// Sidebar menu JavaScript codes

$(function () {
  "use strict";
  var url = window.location + "";
  var path = url.replace(
    window.location.protocol + "//" + window.location.host + "/",
    ""
  );
  var element = $("ul#sidebarnav a").filter(function () {
    return this.href === url || this.href === path; // || url.href.indexOf(this.href) === 0;
  });

  function findMatchingElement() {
    var currentUrl = window.location.href;
    var anchors = document.querySelectorAll("#sidebarnav a");
    for (var i = 0; i < anchors.length; i++) {
      if (anchors[i].href === currentUrl) {
        return anchors[i];
      }
    }

    return null; // Return null if no matching element is found
  }
  var elements = findMatchingElement();

  // Do something with the matching element
  if(elements){
    elements.classList.add("active");
  }

  document
    .querySelectorAll("ul#sidebarnav ul li a.active")
    .forEach(function (link) {
      link.closest("ul").classList.add("in");
      link.closest("ul").parentElement.classList.add("selected");
    });

  document.querySelectorAll("#sidebarnav li").forEach(function (li) {
    const isActive = li.classList.contains("selected");
    if (isActive) {
      const anchor = li.querySelector("a");
      if (anchor) {
        anchor.classList.add("active");
      }
    }
  });

  document.querySelectorAll("#sidebarnav a").forEach(function (link) {
    link.addEventListener("click", function (e) {
      const isActive = this.classList.contains("active");
      const parentUl = this.closest("ul");
      if (!isActive) {
        // hide any open menus and remove all other classes
        parentUl.querySelectorAll("ul").forEach(function (submenu) {
          submenu.classList.remove("in");
        });
        parentUl.querySelectorAll("a").forEach(function (navLink) {
          navLink.classList.remove("active");
        });

        // open our new menu and add the open class
        const submenu = this.nextElementSibling;
        if (submenu) {
          submenu.classList.add("in");
        }

        this.classList.add("active");
      } else {
        this.classList.remove("active");
        parentUl.classList.remove("active");
        const submenu = this.nextElementSibling;
        if (submenu) {
          submenu.classList.remove("in");
        }
      }
    });
  });

});









$(function () {
  // Admin Panel settings

  //****************************
  /* This is for the mini-sidebar if width is less then 1170*/
  //****************************
  var setsidebartype = function () {
    var width =
      window.innerWidth > 0 ? window.innerWidth : this.screen.width;
    if (width < 1199) {
      $("#main-wrapper").attr("data-sidebartype", "mini-sidebar");
      $("#main-wrapper").addClass("mini-sidebar");
    } else {
      $("#main-wrapper").attr("data-sidebartype", "full");
      $("#main-wrapper").removeClass("mini-sidebar");
    }
  };
  $(window).ready(setsidebartype);
  $(window).on("resize", setsidebartype);
  //****************************
  /* This is for sidebartoggler*/
  //****************************
  $(".sidebartoggler").on("click", function () {
    $("#main-wrapper").toggleClass("mini-sidebar");
    if ($("#main-wrapper").hasClass("mini-sidebar")) {
      $(".sidebartoggler").prop("checked", !0);
      $("#main-wrapper").attr("data-sidebartype", "mini-sidebar");
    } else {
      $(".sidebartoggler").prop("checked", !1);
      $("#main-wrapper").attr("data-sidebartype", "full");
    }
  });
  $(".sidebartoggler").on("click", function () {
    $("#main-wrapper").toggleClass("show-sidebar");
  });








  // General dashboard JS 

  $(function () {


  // -----------------------------------------------------------------------
  // sales overview
  // -----------------------------------------------------------------------

  var options_sales_overview = {
    series: [
      {
        name: "Ample Admin",
        data: [355, 390, 300, 350, 390, 180],
      },
      {
        name: "Pixel Admin",
        data: [280, 250, 325, 215, 250, 310],
      },
    ],
    chart: {
      type: "bar",
      height: 275,
      toolbar: {
        show: false,
      },
      foreColor: "#adb0bb",
      fontFamily: "inherit",
      sparkline: {
        enabled: false,
      },
    },
    grid: {
      show: false,
      borderColor: "transparent",
      padding: {
        left: 0,
        right: 0,
        bottom: 0,
      },
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: "25%",
        endingShape: "rounded",
        borderRadius: 5,
      },
    },
    colors: ["var(--bs-primary)", "var(--bs-secondary)"],
    dataLabels: {
      enabled: false,
    },
    yaxis: {
      show: true,
      min: 100,
      max: 400,
      tickAmount: 3,
    },
    stroke: {
      show: true,
      width: 5,
      lineCap: "butt",
      colors: ["transparent"],
    },
    xaxis: {
      type: "category",
      categories: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      axisBorder: {
        show: false,
      },
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: "dark",
    },
    legend: {
      show: false,
    },
  };

  var chart_column_basic = new ApexCharts(
    document.querySelector("#sales-overview"),
    options_sales_overview
  );
  chart_column_basic.render();


});












// Login page JavaScript codes
$(document).ready(function () {
  $('#loginForm').submit(function (e) {
    e.preventDefault();

    const username = $('#username').val();
    const password = $('#password').val();

    $.ajax({
      type: 'POST',
      url: '/admin/login',
      data: { username, password },
      success: function (response) {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: response.message || 'Login successful!',
          timer: 1000,
          showConfirmButton: false
        }).then(() => {
          window.location.href = '/dashboard';
        });
      },
      error: function (xhr) {
        const errorMessage = xhr.responseJSON?.message || 'Invalid credentials';
        Swal.fire({
          icon: 'error',
          title: 'Login Failed',
          text: errorMessage
        });
      }
    });
  });
});











// Appointments Page javascript codes

$(document).ready(function () {
  let currentStatus = 'pending'; // Track current status

  function loadAppointments(status) {
    currentStatus = status;

    $.ajax({
      url: '/appointments/status/' + status,
      method: 'GET',
      success: function (res) {
        const data = res.data || [];

        // Swal.fire({
        //   title: `${status.charAt(0).toUpperCase() + status.slice(1)} Appointments Loaded`,
        //   text: res.message,
        //   icon: 'success',
        //   timer: 1000,
        //   showConfirmButton: false
        // });
        
        let html = '';
        if (data.length === 0) {
          html = `<div class="p-4 text-center">No ${status} appointments found.</div>`;
        } else {
          html += `<div class="px-3 py-2 fw-bold fs-4">Appointments: ${data.length}</div>`;
          data.forEach((item, index) => {
            const shortMessage = item.message.length > 200 ? item.message.substring(0, 200) + '...' : item.message;

            html += `
              <div class="d-flex flex-row comment-row border-bottom p-3 gap-3 appointment-card" 
                   data-index="${index}">
                <div>
                  <span><img src="/dashboard-assets/images/profile/user-3.jpg" class="rounded-circle" alt="user" width="50" /></span>
                </div>
                <div class="comment-text w-100">
                  <h6 class="fw-medium">${item.name}</h6>
                  <p class="mb-1 fs-2 text-muted">${shortMessage}</p>
                  <div class="comment-footer mt-2">
                    <div class="d-flex align-items-center">
                      <span class="update-status-btn badge bg-${status === 'pending' ? 'primary' : status === 'attended' ? 'success' : 'danger'} text-white cursor-pointer" 
                            data-id="${item._id}" 
                            data-status="${item.status}">
                        ${status.charAt(0).toUpperCase() + status.slice(1)}
                      </span>
                    </div>
                    <span class="text-muted ms-auto fw-normal fs-2 d-block mt-2 text-end">
                      Date Booked: ${formatDate(item.dateBooked)}
                    </span>
                  </div>
                </div>
              </div>
            `;
          });

          $('#appointmentList').data('appointments', data);
        }

        $('#appointmentList').html(html);

        // Handle card popup
        $('.appointment-card').on('click', function () {
          const index = $(this).data('index');
          const item = $('#appointmentList').data('appointments')[index];

          Swal.fire({
            title: `<strong>${item.name}</strong>`,
            html: `
              <div style="text-align: left;">
                <p><strong>Email:</strong> ${item.email || 'N/A'}</p>
                <p><strong>Phone:</strong> ${item.phone || 'N/A'}</p>
                <p><strong>Department:</strong> ${item.department || 'N/A'}</p>
                <p><strong>Doctor:</strong> ${item.doctor || 'N/A'}</p>
                <p><strong>Message:</strong> ${item.message || 'N/A'}</p>
                <p><strong>Status:</strong> ${item.status}</p>
                <p><strong>Date Booked:</strong> ${formatDate(item.dateBooked)}</p>
              </div>
            `,
            icon: 'info',
            confirmButtonText: 'Close',
            customClass: { popup: 'text-start' }
          });
        });

        // Handle status update button
        $('.update-status-btn').on('click', function (e) {
          e.stopPropagation(); // Prevent triggering the card click
          const status = $(this).data('status');
          const id = $(this).data('id');

          if (status !== 'pending') return;

          Swal.fire({
            title: 'Update Appointment Status',
            text: 'Do you want to mark this as completed or rejected?',
            icon: 'question',
            showDenyButton: true,             // ← Enables third button
            showCancelButton: true,
            confirmButtonText: 'Completed',
            denyButtonText: 'Reject',        // ← The neutral "cancel" option
            cancelButtonText: 'Cancel',
            customClass: {
              confirmButton: 'btn-completed',
              denyButton: 'btn-rejected',
              cancelButton: 'btn-cancel'
            },
            buttonsStyling: false
          }).then((result) => {
            if (result.isConfirmed) {
              updateAppointmentStatus(id, 'attended');
            } else if (result.isDenied) {
              updateAppointmentStatus(id, 'rejected');
            } else if (result.dismiss === Swal.DismissReason.cancel) {
              // Do nothing or log cancellation
              console.log('User cancelled the action');
            }
          });
        });
      },
      error: function () {
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong while loading appointments.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        $('#appointmentList').html('<div class="p-4 text-danger text-center">Error loading appointments.</div>');
      }
    });
  }

  function updateAppointmentStatus(id, newStatus) {
    $.ajax({
      url: `/appointments/${newStatus}/${id}`,
      method: 'POST',
      success: function (res) {
        Swal.fire({
          title: 'Success!',
          text: res.message || 'Appointment updated.',
          icon: 'success',
          timer: 2000,
          showConfirmButton: false
        });
        loadAppointments(currentStatus);
      },
      error: function (err) {
        Swal.fire({
          title: 'Error!',
          text: err.responseJSON?.message || 'Failed to update appointment.',
          icon: 'error'
        });
      }
    });
  }

  // Load default
  loadAppointments('pending');

  // Navigation buttons
  $('#btnPending').on('click', () => loadAppointments('pending'));
  $('#btnAttended').on('click', () => loadAppointments('attended'));
  $('#btnRejected').on('click', () => loadAppointments('rejected'));
});









// Departments page JavaScript Codes

$(document).ready(function() {
  fetchDepartments();

  // Handle form submission
  $('#departmentForm').on('submit', function(e) {
    e.preventDefault();
    const name = $('#deptName').val().trim();
    const description = $('#deptDesc').val().trim();

    if (!name) {
      return Swal.fire({
        icon: 'warning',
        title: 'Missing Name',
        text: 'Please enter a department name.'
      });
    }

    $.post('/departments/createDepartment', { name, description })
      .done(function(response) {
        Swal.fire({
          icon: 'success',
          title: 'Created!',
          text: 'Department created successfully.'
        });
        $('#departmentForm')[0].reset();
        fetchDepartments();
      })
      .fail(function(xhr) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: xhr.responseJSON?.message || 'Failed to add department.'
        });
      });
  });

  // Fetch departments from server
  function fetchDepartments() {
    $.get('/departments/getAllDepartments', function(data) {
      const tbody = $('#departmentTable tbody');
      tbody.empty();

      if (data.length === 0) {
        tbody.append(`
          <tr>
            <td colspan="3" class="text-center text-muted">No departments found.</td>
          </tr>
        `);
        return;
      }
      
      data.forEach((dept, index) => {
        const shortMessage = dept.description.length > 20 ? dept.description.substring(0, 20) + '...' : dept.description;

        tbody.append(`
          <tr>
            <td>${index + 1}</td>
            <td>${dept.name}</td>
            <td>${shortMessage || 'None'}</td>
            <td class="text-end">
              <a href="javascript:void(0)" class="ps-2 text-primary edit-dept" data-id="${dept._id}">
                <i class="ti ti-edit fs-5"></i>
              </a>
              <a href="javascript:void(0)" class="ps-2 text-danger delete-dept" data-id="${dept._id}">
                <i class="ti ti-trash fs-5"></i>
              </a>
            </td>
          </tr>
        `);
      });
    });
  }



  // Update Departments. Open edit modal or inline form for department
  $(document).on('click', '.edit-dept', function () {
    const id = $(this).data('id');

    // Fetch department info
    $.get('/departments/getSingleDepartment/' + id, function (dept) {
      $('#editDeptId').val(dept._id);
      $('#editDeptName').val(dept.name);
      $('#editDeptDesc').val(dept.description || '');
      $('#editModal').modal('show');
    });
  });

  $('#editDeptForm').on('submit', function (e) {
    e.preventDefault();
    const id = $('#editDeptId').val();
    const name = $('#editDeptName').val().trim();
    const description = $('#editDeptDesc').val().trim();

    if (!name) {
      return Swal.fire({
        icon: 'warning',
        title: 'Missing Field',
        text: 'Department name is required.'
      });
    }

    $.ajax({
      url: '/departments/updateSingleDepartment/' + id,
      method: 'PUT',
      data: { name, description }
    }).done(() => {
      $('#editModal').modal('hide');
      Swal.fire('Updated!', 'Department updated successfully.', 'success');
      fetchDepartments();
    })
    .fail((xhr) => {
      Swal.fire('Error', xhr.responseJSON?.message || 'Failed to update department.', 'error');
    });
  });




  // Delete department
  $(document).on('click', '.delete-dept', function() {
    const id = $(this).data('id');
    Swal.fire({
      title: 'Are you sure?',
      text: "This will permanently delete the department.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, delete it!'
    }).then(result => {
      if (result.isConfirmed) {
        $.ajax({
          url: '/departments/deleteSingleDepartment/' + id,
          type: 'DELETE'
        })
        .done(() => {
          fetchDepartments();
          Swal.fire(
            'Deleted!',
            'Department has been deleted.',
            'success'
          );
        })
        .fail(xhr => {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: xhr.responseJSON?.message || 'Failed to delete department.'
          });
        });
      }
    });
  });
});








// Doctors page JavaScript codes

$(document).ready(function() {

  // Get all Doctors
  function fetchDoctors() {
    $.get('/departments/doctors/getAllDoctors')
      .done((data) => {
        const { departments } = data;
        const container = $('#doctorList');
        container.empty(); // Clear current list

        departments.forEach(cat => {
          cat.doctors.forEach(doc => {
            const html = `
              <div class="d-flex flex-row comment-row border-bottom p-3 gap-3 align-items-center">
                <div>
                  <span><img src="/dashboard-assets/images/profile/user-3.jpg" class="rounded-circle" width="50" alt="doctor" /></span>
                </div>
                <div class="comment-text w-100">
                  <h6 class="fw-medium mb-1">${doc.name}</h6>
                  <p class="text-muted fs-2 mb-1">Department: ${cat.name}</p>
                  <div class="comment-footer mt-2 d-flex align-items-center justify-content-between">
                    <span class="badge bg-info-subtle text-info">Active</span>
                    <span class="action-icons">
                      <a href="javascript:void(0)" class="ps-2 edit-doctor" data-id="${doc._id}" data-department="${cat._id}" data-name="${doc.name}" data-email="${doc.email || ''}" data-phone="${doc.phone || ''}">
                        <i class="ti ti-edit fs-5"></i>
                      </a>
                      <a href="javascript:void(0)" class="ps-2 delete-doctor" data-id="${doc._id}" data-department="${cat._id}">
                        <i class="ti ti-trash fs-5 text-danger"></i>
                      </a>
                    </span>
                  </div>
                </div>
              </div>
            `;
            container.append(html);
          });
        });
      })
      .fail(() => {
        Swal.fire('Error', 'Failed to fetch doctors.', 'error');
      });
  }



  // Add Doctor
  $('#doctorForm').on('submit', function (e) {
    e.preventDefault();
    const formData = {
      name: $('#name').val().trim(),
      department: $('#department').val().trim(),
      email: $('#email').val().trim(),
      phone: $('#phone').val().trim(),
    };

    if (!formData.name || !formData.department || !formData.email || !formData.phone) {
      return Swal.fire({
        icon: 'warning',
        title: 'Missing fields',
        text: 'Please provide fill up all fields.'
      });
    }

    $.post('/departments/doctors/add', formData)
      .done(function (response) {
        Swal.fire({
          icon: 'success',
          title: 'Doctor Added',
          text: response.message || 'Doctor added successfully!'
        }).then(() => {
          fetchDoctors();
        });
      })
      .fail((xhr) => {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: xhr.responseJSON?.message || 'Failed to add doctor.'
        });
      });
    });



  // Update Doctor
  $(document).on('click', '.edit-doctor', function () {
    const departmentId = $(this).data('department');
    const doctorId = $(this).data('id');
    const name = $(this).data('name');
    const email = $(this).data('email');
    const phone = $(this).data('phone');

    // Fill form with current values
    $('#editDoctorId').val(doctorId);
    $('#editDoctorDeptId').val(departmentId);
    $('#editDoctorName').val(name);
    $('#editDoctorEmail').val(email);
    $('#editDoctorPhone').val(phone);

    // Show modal
    $('#editDoctorModal').modal('show');
  });


  $('#editDoctorForm').on('submit', function (e) {
    e.preventDefault();

    const doctorId = $('#editDoctorId').val();
    const departmentId = $('#editDoctorDeptId').val();
    const name = $('#editDoctorName').val().trim();
    const email = $('#editDoctorEmail').val().trim();
    const phone = $('#editDoctorPhone').val().trim();

    if (!name || !email || !phone) {
      return Swal.fire('Missing Fields', 'Please fill in all fields', 'warning');
    }

    $.ajax({
      url: `/departments/${departmentId}/doctors/${doctorId}`,
      method: 'PUT',
      data: { name, email, phone }
    })
      .done(() => {
        $('#editDoctorModal').modal('hide');
        Swal.fire('Updated', 'Doctor updated successfully', 'success');
        fetchDoctors(); // reload list
      })
      .fail(xhr => {
        Swal.fire('Error', xhr.responseJSON?.message || 'Update failed.', 'error');
      });
  });
  


  // Delete Doctor
  $(document).on('click', '.delete-doctor', function () {
    const doctorId = $(this).data('id');
    const departmentId = $(this).data('department');

    Swal.fire({
      title: 'Are you sure?',
      text: "This will delete the doctor permanently.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, delete!'
    }).then((result) => {
      if (!result.isConfirmed) return;

      $.ajax({
        url: `/departments/${departmentId}/doctors/${doctorId}`,
        type: 'DELETE'
      })
      .done(() => {
        Swal.fire({
          icon: 'success',
          title: 'Deleted',
          text: 'Doctor has been deleted.'
        }).then(() => {
          fetchDoctors(); // reload list
        });
      })
      .fail((xhr) => {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: xhr.responseJSON?.message || 'Delete failed.'
        });
      });
    });
  });

  fetchDoctors();
});














// Carousel images page JavaScript codes

$(document).ready(function () {
  // Preview uploaded image instantly
  $('#carouselImage').on('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        $('#previewCarouselImage').attr('src', e.target.result).show();
      };
      reader.readAsDataURL(file);
    } else {
      $('#previewCarouselImage').hide();
    }
  });

  // Submit new carousel image
  $('#carouselForm').submit(function (e) {
    e.preventDefault();

    const form = this;
    const fd = new FormData(this);

    $.ajax({
      url: '/images/carousel/uploadCarouselImage',
      type: 'POST',
      data: fd,
      processData: false,
      contentType: false,
      success(res) {
        form.reset();
        $('#previewCarouselImage').hide();
        fetchCarouselImages();
        Swal.fire('Success', 'Image uploaded successfully!', 'success');
      },
      error(err) {
        Swal.fire('Error', err.responseJSON?.message || 'Upload failed', 'error');
      }
    });
  });

  // Fetch and display carousel images
  function fetchCarouselImages() {
    $.get('/images/carousel/getAllCarouselImages', function (images) {
      let html = '';

      if (images.length === 0) {
        html = `
          <div class="col-12">
            <div class="alert alert-info text-center" role="alert">
              No carousel images uploaded yet.
            </div>
          </div>
        `;
      } else {
        html = images.map(img => `
          <div class="col-md-6">
            <div class="card border rounded-3 overflow-hidden shadow-sm position-relative">
              <img src="${img.url}" class="card-img-top img-thumbnail img-clickable" data-url="${img.url}" style="height: 150px; object-fit: cover; cursor: zoom-in;" />
              <div class="card-body p-2">
                <h6 class="mb-1 text-truncate" title="${img.name}"><i class="ti ti-photo me-2"></i>${img.name}</h6>
                <div class="d-flex justify-content-end gap-2 mt-2">
                  <button class="btn btn-sm btn-outline-primary edit-carousel" data-id="${img._id}" data-name="${img.name}"><i class="ti ti-edit"></i></button>
                  <button class="btn btn-sm btn-outline-danger delete-carousel" data-id="${img._id}"><i class="ti ti-trash"></i></button>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }

      $('#carouselList').html(html);
    });
  }




  // Fullscreen image preview
  $(document).on('click', '.img-clickable', function () {
    const src = $(this).data('url');
    $('#fullscreenImage').attr('src', src);
    $('#imagePreviewModal').modal('show');
  });



  // Edit Carousel Image
  $(document).on('click', '.edit-carousel', function () {
    const id = $(this).data('id');

    $.get(`/images/carousel/getCarouselImageById/${id}`, function (data) {
      $('#editCarouselId').val(data._id);
      $('#editCarouselName').val(data.name);
      $('#editCurrentImage').attr('src', data.url).show();
      $('#editPreviewImage').hide().attr('src', '');
      $('#editCarouselImageInput').val('');
      $('#editCarouselModal').modal('show');
    });
  });

  // 🟡 Preview newly selected image
  $('#editCarouselImageInput').on('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        $('#editPreviewImage').attr('src', e.target.result).show();
      };
      reader.readAsDataURL(file);
    } else {
      $('#editPreviewImage').hide();
    }
  });

  // 🟢 Submit updated carousel info
  $('#editCarouselForm').submit(function (e) {
    e.preventDefault();
    const id = $('#editCarouselId').val();
    const fd = new FormData(this);

    $.ajax({
      url: `/images/carousel/updateCarouselImage/${id}`,
      type: 'PUT',
      data: fd,
      processData: false,
      contentType: false,
      success() {
        $('#editCarouselModal').modal('hide');
        fetchCarouselImages();
        Swal.fire({
          icon: 'success',
          title: 'Updated!',
          text: 'Carousel image updated successfully.'
        });
      },
      error(err) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: err.responseJSON?.message || 'Update failed.'
        });
      }
    });
  });



  // Delete image
  $(document).on('click', '.delete-carousel', function () {
    const id = $(this).data('id');
    Swal.fire({
      title: 'Delete Image?',
      text: 'This cannot be undone.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel',
      customClass: {
        confirmButton: 'btn-rejected',
        cancelButton: 'btn-cancel'
      },
      // buttonsStyling: false
    }).then(result => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/images/carousel/DeleteCarouselImage/${id}`,
          type: 'DELETE',
          success() {
            fetchCarouselImages();
            Swal.fire('Deleted!', 'Image deleted successfully.', 'success');
          },
          error(err) {
            Swal.fire('Error', err.responseJSON?.message || 'Delete failed', 'error');
          }
        });
      }
    });
  });


  // Initial load
  fetchCarouselImages();
});
















// Gallery images page JavaScript codes

$(document).ready(function () {
  // Preview selected gallery image
  $('#galleryImage').on('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        $('#previewGalleryImage').attr('src', e.target.result).show();
      };
      reader.readAsDataURL(file);
    } else {
      $('#previewGalleryImage').hide();
    }
  });

  // Upload new gallery image
  $('#galleryForm').submit(function (e) {
    e.preventDefault();
    
    const form = this;
    const fd = new FormData(this);
    
    $.ajax({
      url: '/images/gallery/uploadGalleryImage',
      type: 'POST',
      data: fd,
      processData: false,
      contentType: false,
      success(res) {
        form.reset();
        $('#previewGalleryImage').hide();
        fetchGalleryImages();
        Swal.fire('Uploaded!', 'Gallery image uploaded successfully!', 'success');
      },
      error(err) {
        Swal.fire('Error', err.responseJSON?.message || 'Upload failed', 'error');
      }
    });
  });

  // Load gallery images
  function fetchGalleryImages() {
    $.get('/images/gallery/getAllGalleryImages', function (images) {
      let html = '';

      if (images.length === 0) {
        html = `
          <div class="col-12">
            <div class="alert alert-info text-center" role="alert">
              No gallery images uploaded yet.
            </div>
          </div>
        `;
      } else {
        html = images.map(img => `
          <div class="col-md-6">
            <div class="card border rounded-3 overflow-hidden shadow-sm position-relative">
              <img src="${img.url}" class="card-img-top img-thumbnail img-clickable" data-url="${img.url}" style="height: 150px; object-fit: cover; cursor: zoom-in;" />
              <div class="card-body p-2">
                <h6 class="mb-1 text-truncate" title="${img.name}"><i class="ti ti-photo me-2"></i>${img.name}</h6>
                <div class="d-flex justify-content-end gap-2 mt-2">
                  <button class="btn btn-sm btn-outline-primary edit-gallery" data-id="${img._id}" data-name="${img.name}"><i class="ti ti-edit"></i></button>
                  <button class="btn btn-sm btn-outline-danger delete-gallery" data-id="${img._id}"><i class="ti ti-trash"></i></button>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }

      $('#galleryList').html(html);
    });
  }


  // Fullscreen preview
  $(document).on('click', '.img-clickable', function () {
    const src = $(this).data('url');
    $('#fullscreenGalleryImage').attr('src', src);
    $('#galleryPreviewModal').modal('show');
  });



  // Open Edit Modal
  $(document).on('click', '.edit-gallery', function () {
    const id = $(this).data('id');

    $.get(`/images/gallery/getSingleGalleryImage/${id}`, function (data) {
      $('#editGalleryId').val(data._id);
      $('#editGalleryName').val(data.name);
      $('#editGalleryCurrentImage').attr('src', data.url).show();
      $('#editGalleryPreviewImage').hide().attr('src', '');
      $('#editGalleryImageInput').val('');
      $('#editGalleryModal').modal('show');
    });
  });

  // Preview selected image in modal
  $('#editGalleryImageInput').on('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        $('#editGalleryPreviewImage').attr('src', e.target.result).show();
      };
      reader.readAsDataURL(file);
    } else {
      $('#editGalleryPreviewImage').hide();
    }
  });

  // Submit update form
  $('#editGalleryForm').submit(function (e) {
    e.preventDefault();
    const id = $('#editGalleryId').val();
    const fd = new FormData(this);

    $.ajax({
      url: `/images/gallery/updateGalleryImage/${id}`,
      type: 'PUT',
      data: fd,
      processData: false,
      contentType: false,
      success() {
        $('#editGalleryModal').modal('hide');
        fetchGalleryImages();
        Swal.fire('Updated!', 'Gallery image updated.', 'success');
      },
      error(err) {
        Swal.fire('Error', err.responseJSON?.message || 'Update failed', 'error');
      }
    });
  });

  // Delete image
  $(document).on('click', '.delete-gallery', function () {
    const id = $(this).data('id');
    Swal.fire({
      title: 'Delete Image?',
      text: 'This action cannot be undone.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel',
      customClass: {
        confirmButton: 'btn-rejected',
        cancelButton: 'btn-cancel'
      }
    }).then(result => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/images/gallery/deleteGalleryImage/${id}`,
          type: 'DELETE',
          success() {
            fetchGalleryImages();
            Swal.fire('Deleted!', 'Image deleted successfully.', 'success');
          },
          error(err) {
            Swal.fire('Error', err.responseJSON?.message || 'Delete failed', 'error');
          }
        });
      }
    });
  });


  fetchGalleryImages();
});



















// Blog page JavaScript code

$(document).ready(function () {
  fetchBlogs();

  // Preview selected new image
  $('#blogImage').on('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        $('#previewImage').attr('src', e.target.result).show();
      };
      reader.readAsDataURL(file);
    } else {
      $('#previewImage').hide();
    }
  });

  // Create post with image
  $('#blogForm').submit(function (e) {
      e.preventDefault();
      const formEl = this;
      const fd = new FormData(formEl);
      $.ajax({
          url: '/blog/createBlog',
          type: 'POST',
          data: fd,
          processData: false,
          contentType: false,
          success(res) {
              $(formEl)[0].reset();
              $('#previewImage').hide();
              fetchBlogs();
              Swal.fire({
                  icon: 'success',
                  title: 'Created!',
                  text: res.message || 'Blog post created successfully.'
              });
          },
          error(err) {
              console.error(err);
              Swal.fire({
                  icon: 'error',
                  title: 'Oops...',
                  text: err.responseJSON?.message || 'Error creating blog'
              });
          }
      });
  });

  // Fetch blogs (no change)
  function fetchBlogs() {
    $.get('/blog/getAllBlogs', function (data) {
      let html = '';

      if (data.length === 0) {
        html = `
          <div class="col-12">
            <div class="alert alert-info text-center" role="alert">
              No blogs available yet.
            </div>
          </div>
        `;
      } else {
        html = data.map(blog => {
          const shortMessage = blog.message.length > 50 ? blog.message.substring(0, 50) + '...' : blog.message;

          return `
            <div class="d-flex flex-row comment-row border-bottom p-3 gap-3">
              <div>
                ${blog.image
                  ? `<img src="${blog.image}" class="rounded-circle" width="50" height="50" />`
                  : `<i class="ti ti-camera fs-2"></i>`
                }
              </div>
              <div class="comment-text w-100">
                <h6 class="fw-medium">${blog.title}</h6>
                <p class="mb-1 fs-2 text-muted">${shortMessage}</p>
                <div class="comment-footer mt-2 d-flex justify-content-between align-items-center">
                  <div>
                    <a href="javascript:void(0)" class="ps-3 text-primary edit-btn" data-id="${blog._id}">
                      <i class="ti ti-edit fs-5"></i>
                    </a>
                    <a href="javascript:void(0)" class="ps-3 text-danger delete-btn" data-id="${blog._id}">
                      <i class="ti ti-trash fs-5"></i>
                    </a>
                  </div>
                  <span class="text-muted fw-normal fs-2">${new Date(blog.createdAt).toDateString()}</span>
                </div>
              </div>
            </div>
          `;
        }).join('');
      }

      $('#blogList').html(html);
    });
  }



    // Open Edit Modal and preload data
    $(document).on('click', '.edit-btn', function () {
      const id = $(this).data('id');
      $.get(`/blog/getSingleBlog/${id}`, function (blog) {
        $('#editId').val(blog._id);
        $('#editTitle').val(blog.title);
        $('#editMessage').val(blog.message);
        if (blog.image) {
          $('#currentImage').attr('src', blog.image).show();
        } else {
          $('#currentImage').hide();
        }
        $('#previewEditImage').hide().attr('src', '');
        $('#editImage').val('');
        $('#editModal').modal('show');
      });
    });


    // Preview the selected image in the edit modal
    $('#editImage').on('change', function () {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          $('#previewEditImage')
            .attr('src', e.target.result)
            .show();
        };
        reader.readAsDataURL(file);
      } else {
        $('#previewEditImage').hide();
      }
    });

    // Preview selected new image
    $('#editForm').submit(function (e) {
      e.preventDefault();
      const id = $('#editId').val();
      const fd = new FormData(this);
      $.ajax({
        url: `/blog/updateSingleBlog/${id}`,
        type: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success() {
          $('#editModal').modal('hide');
          fetchBlogs();
          Swal.fire({
              icon: 'success',
              title: 'Updated!',
              text: 'Blog post updated successfully.'
          });
        },
        error(err) {
          console.error(err);
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: err.responseJSON?.message || 'Error updating blog'
          });
        }
      });
    });

    // Delete blog
    $(document).on('click', '.delete-btn', function () {
      const id = $(this).data('id');
      Swal.fire({
          title: 'Are you sure?',
          text: "This will permanently delete the post.",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          $.post(`/blog/deleteSingleBlog/${id}`, function () {
            fetchBlogs();
            Swal.fire(
              'Deleted!',
              'Your blog post has been deleted.',
              'success'
            );
          });
        }
      });
    });
  });










  // Change password page Javascript codes 
  
  $(function() {
    $('.toggle-password').on('click', function() {
      const input = $($(this).data('target'));
      const icon = $(this).find('i');

      if (input.attr('type') === 'password') {
        input.attr('type', 'text');
        icon.removeClass('ti-eye').addClass('ti-eye-off');
      } else {
        input.attr('type', 'password');
        icon.removeClass('ti-eye-off').addClass('ti-eye');
      }
    });

    $('#changePasswordForm').on('submit', function(e) {
      e.preventDefault();
      const currentPass = $('#currentPassword').val().trim();
      const newPass = $('#newPassword').val().trim();
      if (!newPass || !currentPass) return;

      $.ajax({
        url: '/admin/update-password',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ currentPassword: currentPass, newPassword: newPass }),
        beforeSend() {
          Swal.fire({
            title: 'Updating…',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
          });
        },
        success(res) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: res.message || 'Password changed successfully!'
          });
          $('#newPassword').val('');
        },
        error(xhr) {
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: xhr.responseJSON?.message || 'An error occurred. Please try again.'
          });
        }
      });
    });
  });
});













// Logout JavaScript codes
$(() => {
  $('.logout-btn').on('click', function (e) {
    e.preventDefault();

    Swal.fire({
      title: 'Are you sure?',
      text: "You will be logged out of your account.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, logout'
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          type: 'GET',
          url: '/logout',
          success: function (response) {
            Swal.fire({
              icon: 'success',
              title: 'Logged out',
              text: response.message,
              timer: 1000,
              showConfirmButton: false
            }).then(() => {
              window.location.href = '/login';
            });
          },
          error: function (xhr) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: xhr.responseJSON?.message || 'An error occured while logging out.'
            });
          }
        });
      }
    });
  });
});
